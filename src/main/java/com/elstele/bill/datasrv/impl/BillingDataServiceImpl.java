package com.elstele.bill.datasrv.impl;

import com.elstele.bill.assembler.TransactionAssembler;
import com.elstele.bill.dao.interfaces.AccountDAO;
import com.elstele.bill.dao.interfaces.ServiceDAO;
import com.elstele.bill.dao.interfaces.TransactionDAO;
import com.elstele.bill.datasrv.interfaces.BillingDataService;
import com.elstele.bill.datasrv.interfaces.TransactionDataService;
import com.elstele.bill.domain.Account;
import com.elstele.bill.domain.Transaction;
import com.elstele.bill.form.AccountForm;
import com.elstele.bill.form.TransactionForm;
import com.elstele.bill.utils.Constants;
import com.elstele.bill.utils.Enums.Status;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

@Service
public class BillingDataServiceImpl implements BillingDataService {
    @Autowired
    private TransactionDAO transactionDAO;
    @Autowired
    private AccountDAO accountDAO;
    @Autowired
    private ServiceDAO serviceDAO;


    @Override
    @Transactional
    public Integer createTransactionAndDecreaseBalance(Integer serviceId) {
        //get service cost
        com.elstele.bill.domain.Service curService = serviceDAO.getById(serviceId);

        Float cost = curService.getServiceType().getPrice();
        Integer cutAccountId = curService.getAccount().getId();
        Account account = accountDAO.getAccountForUpgradeById(cutAccountId);
        //create transaction for bill
        Transaction transaction = createTransactionForService(curService);
        transactionDAO.create(transaction);
        //decrease account balance by service cost
        Float balance = account.getCurrentBalance();
        Float newBalance = balance - cost;
        account.setCurrentBalance(newBalance);
        accountDAO.update(account);
        System.out.println("Service with Id " + serviceId + " processed");
        return transaction.getId();
    }

    private Transaction createTransactionForService(com.elstele.bill.domain.Service curService) {
        Float cost = curService.getServiceType().getPrice();
        Account account = curService.getAccount();
        Transaction transaction = new Transaction();
        transaction.setStatus(Status.ACTIVE);
        transaction.setAccount(account);
        transaction.setPrice(cost);
        transaction.setDirection(Constants.TransactionDirection.CREDIT);
        transaction.setSource(Constants.TransactionSource.BILLING);
        transaction.setComment("Autogenerated by billing process");

        java.util.Date date = new java.util.Date();
        transaction.setDate(new Timestamp(date.getTime()));
        return transaction;
    }

}
