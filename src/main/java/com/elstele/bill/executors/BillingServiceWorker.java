package com.elstele.bill.executors;

import com.elstele.bill.dao.interfaces.AccountDAO;
import com.elstele.bill.dao.interfaces.ServiceDAO;
import com.elstele.bill.dao.interfaces.TransactionDAO;
import com.elstele.bill.domain.Account;
import com.elstele.bill.domain.Transaction;
import com.elstele.bill.utils.Constants;
import com.elstele.bill.utils.Enums.Status;
import org.springframework.beans.factory.annotation.Autowire;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import static com.elstele.bill.utils.Constants.BILLING_CALL_WORKER;
import static com.elstele.bill.utils.Constants.BILLING_SERVICE_WORKER;

/**
 * Created by ivan on 15/12/16.
 */

@Service(BILLING_SERVICE_WORKER)
@Scope("prototype")
public class BillingServiceWorker implements  Runnable, Worker {

    @Autowired
    private TransactionDAO transactionDAO;
    @Autowired
    private AccountDAO accountDAO;
    @Autowired
    private ServiceDAO serviceDAO;

    private Integer serviceId;

    @Override
    public void setTargetId(Integer id) {
        serviceId = id;
    }

    @Override
    public void run() {

        //TODO all this methos need to be covered by one transaction

        //get service cost
        com.elstele.bill.domain.Service curService = serviceDAO.getById(serviceId);

        Float cost = curService.getServiceType().getPrice();
        Account account = curService.getAccount();
        //create transaction for bill
        Transaction transaction = createTransactionForService(curService);
        transactionDAO.create(transaction);
        //decrease account balance by service cost
        Float balance = account.getCurrentBalance();
        Float newBalance = balance - cost;
        account.setCurrentBalance(newBalance);
        accountDAO.update(account);
        System.out.println("Service with Id " + serviceId + " processed");
    }

    private Transaction createTransactionForService(com.elstele.bill.domain.Service curService) {
        Float cost = curService.getServiceType().getPrice();
        Account account = curService.getAccount();
        Transaction transaction = new Transaction();
        transaction.setStatus(Status.ACTIVE);
        transaction.setAccount(account);
        transaction.setPrice(cost);
        transaction.setDirection(Constants.TransactionDirection.CREDIT);
        transaction.setSource(Constants.TransactionSource.BILLING);
        transaction.setComment("Autogenerated by billing process");
        return transaction;
    }

    public void setServiceId(Integer serviceId) {
        this.serviceId = serviceId;
    }

    public Integer getServiceId() {
        return serviceId;
    }
}
